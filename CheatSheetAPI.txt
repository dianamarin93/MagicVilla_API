API -> Application Programming Interface (reponsible for trasmiting the data)

API is represented by request and response
Request Object
Components : verbs, headers, content

1.HTTP Verbs / Actions

-> GET : fetches/ request resource
-> POST : creates/ inserts resource
-> PUT : updates/ modifies resource
-> PATCH : updates/ modifies partial resource
-> DELETE : deletes/ removes resource

More verbs....

2.Headers / Request's Metadata

Content type : content's format
Content length: size of the content
Authorization: who is making the request
Accept: what are the accepted type(s)

3. Content / Request's Content
- HTML, CSS, XML, JSON
- Information for the request
- BLOBS

Response Object
Components: status code, headers, content

1. Status Codes for operation result

100-199 : Informational
200-299 : Success (200 - OK, 201 - Created, 204 - No Content)
300-399 : Redirection
400-499 : Client Errors (400 - Bad Request, 404 - Not Found, 409 - Conflict)
500-599 : Server Errors (500 - Internal Server Error)

2.Headers / Response's Metadata

Content type : content's format
Content length: size of the content
Expires : when is this valid

3. Content / Request's Content
- HTML, CSS, XML, JSON
- BLOBS

In vs we use Asp>net Core Web API
if we want to add an endpoint inside controller file and don't add the atributes ([ApiController] -> 
[Route("api/VilaAPI")]) we'll get an error;

- when we add an endpoint it's important to write before it the atribute that represents the action that it will do
Example:
  // this endpoint will return multiple records
 [HttpGet]
 public ActionResult<IEnumerable<VillaDTO>> GetVillas()
 {
     return Ok(VillaStore.villaList);
 }
 
 // if our endpoint expects parameter we have to pass them in httpget() as we see in our example
 // this endpoint will return one record (if the id isn't valid it will return null)
 
 [HttpGet("{id:int}", Name = "GetVilla")]
   public ActionResult GetVilla(int id)
  {
      if (id == 0)
      {
          return BadRequest();
      }

      var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);
      if (villa == null) {
          return NotFound();
      }
     
      return Ok(villa);

  }
  
  Response Types - there are two ways to define them
  
  Example 1: 
   [HttpGet("{id:int}", Name = "GetVilla")]
   [ProducesResponseType(200, Type = typeof(VillaDTO))] // ok
   [ProducesResponseType(400)] // bad request
   [ProducesResponseType(404)] // not found
   
    public ActionResult<VillaDTO> GetVilla(int id)
 {
     if (id == 0)
     {
         return BadRequest();
     }

     var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);
     if (villa == null) {
         return NotFound();
     }
    
     return Ok(villa);

 }
 
 Example 2: 
 
 [HttpGet("{id:int}", Name = "GetVilla")]
 [ProducesResponseType(StatusCodes.Status201Created)] // created
 [ProducesResponseType(StatusCodes.Status400BadRequest)] // bad request
 [ProducesResponseType(StatusCodes.Status404NotFound)] // not found
    public ActionResult GetVilla(int id)
   {
       if (id == 0)
       {
           return BadRequest();
       }

       var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);
       if (villa == null) {
           return NotFound();
       }
      
       return Ok(villa);

   }
   
 //if we want to update a record there are 2 ways to do this
// 1. HttpPut (will update all the fields)
// 2. HttpPatch (will update one field)

Example with PUT:

        [HttpPut("{id:int}", Name = "UpdateVilla")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
       
        public IActionResult UpdateVilla(int id, [FromBody] VillaDTO villaDTO)
        {
            if (villaDTO == null || id != villaDTO.Id)
            {
                return BadRequest();
            }
            var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);
            villa.Name = villaDTO.Name;
            villa.Sqft = villaDTO.Sqft;
            villa.Occupancy = villaDTO.Occupancy;

            return NoContent();
        }


Example with PATCH:
    [HttpPatch("{id:int}", Name = "UpdatePartialVilla")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public IActionResult UpdatePartialVilla(int id, JsonPatchDocument<VillaDTO> patchDTO)
    {
        if (patchDTO == null || id == 0)
        {
            return BadRequest();
        }
        var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);

        if (villa == null)
        {
            return BadRequest();
        }
        // we want this change to be applied to villa object , but if we have errors to be stored in the ModelState
        patchDTO.ApplyTo(villa, ModelState);

        if (!ModelState.IsValid)
        {
           return BadRequest(); 
        }
        return NoContent();
    }
}

The Accept header
Content negotiation takes place when an Accept header appears in the request.
When a request contains an accept header, ASP.NET Core:

Enumerates the media types in the accept header in preference order.
Tries to find a formatter that can produce a response in one of the formats specified.
If no formatter is found that can satisfy the client's request, ASP.NET Core:

Returns 406 Not Acceptable if MvcOptions.ReturnHttpNotAcceptable is set to true, or -
Tries to find the first formatter that can produce a response.

option.ReturnHttpNotAcceptable = true; (I use it in Program.cs file) -> if we use json and the client try to insert other type (xml) it will return the StatusCode 406 (Not Acceptable);

Example:
builder.Services.AddControllers(option =>
{
    option.ReturnHttpNotAcceptable = true;
}).AddNewtonsoftJson();
 
 
 if we want to add in the future inside our content negotiation we can do this:
 builder.Services.AddControllers(option =>
{
    option.ReturnHttpNotAcceptable = true;
}).AddNewtonsoftJson().AddXMLDataContractSerializerFormatters();
 

Difference between Action Result and IActionResult

When we use ActionResult<> we need to mention what is the returned type, but when we use IActionResult we don't have to do this (because when we delete a recording we don't have to return anything)

Instructions to install NugetPackages for PAtch
- have a look at screenshot (C27(Nugget packages for HttpPatch)), after we installed it, we need to Update Program.cs file:

--->>>>builder.Services.AddControllers().AddNewtonsoftJson();

https://jsonpatch.com/
(when we click on patch on Swagger we'll see two fields that we don't need them: "operationType": 0, and "value": "string", click on link that I attached above at replace and remove both fields, look at screenshot C-28 using patch example)

op = operation(replace - in our case)
path = property name that need to be updated (name - in our case)
====================================================================================================
Dependency Injection and DBContext

Using logger we can log in our console what we need : errors, different messages, etc.
Examples
		   _logger.LogInformation("Getting all villas");
           _logger.LogError("Get Villa Error with Id " + id);
		   
But if we want to display our messages in production we need to follow the steps :
-> install Serilog.AspNetCore from Manage Nugget Packages (Right click on the project name and select the option);

-> Then we will modify our Program.cs file as we see in the next example: 
Log.Logger = new LoggerConfiguration().MinimumLevel.Debug()
    .WriteTo.File("log/villaLogs.txt", rollingInterval: RollingInterval.Day).CreateLogger();

builder.Host.UseSerilog(); => it will create a new txt file and there we can see what happens in our app (what endpoint we executed, if exists errors, etc.);

Custom implementation of Logger using Dependency Injection	

- we have to create an interface to declare a method here, then to create a class that inherits the interface and then to edit program.cs and use some methods as we'll see in the next examples:
See the difference between these 3 methods : 
AddScoped() - Creates a new instance of the service for each client request. This is useful for services that should be consistent within a single request but isolated between different requests; 
AddSingleton() - Creates a single instance of the service for the entire lifetime of the application. This instance is shared across all requests and users, so itâ€™s best for stateful or long-lived dependencies; 
AddTransient() - Creates a new instance of the service each time it is requested. This is ideal for lightweight, stateless services where each operation should start with a fresh instances;

Example for Logger inside Program.cs file
builder.Services.AddSingleton<ILogging, Logging>();

When we want to make connection between MSSQL and Visual Studio we need to follow the steps
1. Create new file inside the folder Data for our app, then inherits the class DbContext, create a constructor and a new property that use the class that we need to create our table as we see in our example:
  public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
 {
     
 }
 
 public class ApplicationDbContext : DbContext
 {
     public DbSet<Villa> Villas { get; set; }
 }
 
 2. Go in the file appsettings.json and add the connection string as we see in our example:
 "ConnectionStrings": {
  "DefaultSqlConnection": "Server=(localdb)\\MSSQLLocalDB;Database=MagicVilla;Trusted_Connection=True; MultipleActiveResultSets=true"
}

3. Modify our porgram.cs file and add the connection string that we declared inside the file appsettings.json (see the example):
builder.Services.AddDbContext<ApplicationDbContext>(option =>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultSqlConnection"));
});

	   
If we want an id frm table's database to be primary key, we have to add two atributes in C# as wee see in the nex example:
  public class Villa
  {
      [Key]
      [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
      public int Id { get; set; }
	  
  }

Steps to create a table in database from Visual Studio: Tools -> Nugget Package Manager -> Package Manager Console -> write in terminal this command (add-migration AddVillaTable) the write another command in terminal to add new table in our database
(update-database) ;  

Everytime we want to create an update a table first we use the command add-migration that I mentioned above then we use the second command update-database;

If we received the error System.InvalidOperationExecution (the instance of entity type cannot be tracked.....because the id already exists)  when we use Patch endpoint we had to add the method AsNoTracking() as we see in the example:
  var villa = _db.Villas.AsNoTracking().FirstOrDefault(u => u.Id == id);
  
  How we can convert from one object to another (ex. : From VillaDTO to Villa) we can use AutoMapper, but we have to follow the steps:
  -> (we find it in Nugget Package Manager) we  need to install it;
  -> then create a file that inherits the class Profile (it's specific for Mapper), then create a constructor and declare what we want to conert inside it as we see in the next example:
      public class MappingConfig : Profile
    {
        public MappingConfig() {
            CreateMap<Villa, VillaDTO>();
            CreateMap<VillaDTO, Villa>();

            CreateMap<Villa, VillaCreateDTO>().ReverseMap();
            CreateMap<Villa, VillaUpdateDTO>().ReverseMap();
        }  
    }
	
	-> add this file in our Program.cs as we see in our example:
	builder.Services.AddAutoMapper(typeof(MappingConfig));
	
	-> then modify the controller and use map as we see in our file VilaAPIController.cs:
Example for get all villas (using first GET endpoint)
	 public class VilaAPIController : ControllerBase
 {
     private readonly ApplicationDbContext _db;
     private readonly IMapper _mapper;
     public VilaAPIController(ApplicationDbContext db, IMapper mapper)
     {
         _db = db;
         _mapper = mapper;
     }


     [HttpGet]
     [ProducesResponseType(StatusCodes.Status200OK)]
     public async Task<ActionResult<IEnumerable<VillaDTO>>> GetVillas()
     {
         IEnumerable<Villa> villaList = await _db.Villas.ToListAsync();
         return Ok(_mapper.Map<List<VillaDTO>>(villaList));
     }


     [HttpGet("{id:int}", Name = "GetVilla")]
     [ProducesResponseType(StatusCodes.Status201Created)]
     [ProducesResponseType(StatusCodes.Status400BadRequest)]
     [ProducesResponseType(StatusCodes.Status404NotFound)]
     public async Task<ActionResult> GetVilla(int id)
     {
         if (id == 0)
         {
             return BadRequest();
         }

         var villa = await _db.Villas.FirstOrDefaultAsync(u => u.Id == id);
         if (villa == null)
         {
             return NotFound();
         }

         return Ok(_mapper.Map<VillaDTO>(villa));

     }
}


// return a list of all villas
Task<List<Villa>> GetAllAsync(Expression<Func<Villa, bool>> filter = null);

// return one villa
Task<Villa> GetAsync(Expression<Func<Villa, bool>> filter = null, bool tracked = true);

Example about how it lokks before and after implementing APIResponse

Before:
  [HttpGet("{id:int}", Name = "GetVilla")]
  [ProducesResponseType(StatusCodes.Status201Created)]
  [ProducesResponseType(StatusCodes.Status400BadRequest)]
  [ProducesResponseType(StatusCodes.Status404NotFound)]
  public async Task<ActionResult> GetVilla(int id)
  {
      if (id == 0)
      {
          return BadRequest();
      }

      var villa = await _dbVilla.GetAsync(u => u.Id == id);
      if (villa == null)
      {
          return NotFound();
      }

      return Ok(_mapper.Map<VillaDTO>(villa));

  }
  
  After
 [HttpGet("{id:int}", Name = "GetVilla")]
 [ProducesResponseType(StatusCodes.Status201Created)]
 [ProducesResponseType(StatusCodes.Status400BadRequest)]
 [ProducesResponseType(StatusCodes.Status404NotFound)]
 public async Task<ActionResult<APIResponse>> GetVilla(int id)
 {
     if (id == 0)
     {
         return BadRequest();
     }

     var villa = await _dbVilla.GetAsync(u => u.Id == id);
     if (villa == null)
     {
         return NotFound();
     }

     _response.Result = _mapper.Map<VillaDTO>(villa);
     _response.StatusCode = HttpStatusCode.OK;
     return Ok(_response);
 }

Add Foreign Key Reference
The ForeignKey attribute is used to specify which property is the foreign key in a relationship. The ForeignKey attribute can be used in the following ways to configure the relationship correctly.
In our case we ant to create relationship between Villas and VillasNumber as we see in the next example:
     [ForeignKey("Villa")]
     public int VillaID { get; set; }
     public Villa Villa { get; set; }
 !!! after every modify that we want to add in our database then it's important to be added as migartion then  update database to be sure that my change will work
 
 
 The name of the class library SD means Static Details;
 
how can i add url in my projecct (MagicVilla_Web)
Inside the file appsettings.json we have to write the next thing:
"ServiceUrls": {
  "VillaAPI": "https://localhost:7001"
}

With the next condition we'll be sure that Data won't be null in POST/PUT HTTP Calls:
 if (apiRequest.Data != null)
 {
     message.Content = new StringContent(JsonConvert.SerializeObject(apiRequest.Data), Encoding.UTF8, "application/json");
 }
 
 Because the details or description of our villa can't be display in our browser (because this can't read it we need to transform it in html language as wee see in the next example, using MarkupString):
 <p class="card-text">
    @((MarkupString)villa.Details)
</p> (inside file Index.cshtml);

If we want to add a dropdown for our VillaNumber to let the user to select an option we have to use the next example:
 Example: 
 [ValidateNever] - we don't need validation when the user want to select an option
 public IEnumerable<SelectListItem> VillaList { get; set; }
 
 if we want to display some notification or error messages we can navigate here:
 https://sweetalert2.github.io/ then we will create a new partial view (Notification in our case) use a script to install sweetnotification for success and error and call it inside the file _Layout
 
 
 when we need to work on a login method we have to follow the steps:
 - to check if already exists the same user and password in database
 - to generate a token that use a secret key to autenthicate the user (//  if the user was found generate JWT Token) and we have to add it inside appsettings.json as we see in the next example:
   "ApiSettings": {
    "Secret" : "This is used to sign and verify JWT Tokens, replace it with your own secret"
  }